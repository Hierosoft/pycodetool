#!/usr/env/python
'''
License: Creative Commons 0 (
[CC0](https://creativecommons.org/share-your-work/public-domain/cc0/))
2021 by Jake "Poikilos" Gustafson
This file should be distributed with processed programs if the
function(s) is/are inserted by python_remove_dotnet.py.

Do not edit this file unless it is the copy in the pycodetool repo.
This file may be automatically overwritten by pycodetool.
'''

def IsWhiteSpace(*args):
    '''
    Mimic char.IsWhiteSpace.

    Sequential arguments:
    1st (args[0]) -- String to check as a whole or as a character
    2nd (args[1]) -- If present, the second param is the index in
                     args[0] to check and no other parts of args[0] will
                     be checked.
    '''
    if len(args) < 1:
        raise ValueError("IsWhiteSpace only takes (c)"
                         " or (c, index) but got {}".format(args))
    if len(args) == 1:
        if (len(args[0]) != 1):
            raise ValueError("The 1st argument must be a character if"
                             " no index is specified as the 2nd"
                             " argument (args={}).".format(args))
        return str.isspace(args[0])
    elif len(args) == 2:
        return str.isspace(args[0][args[1]])
    raise ValueError("IsWhiteSpace only takes (charStr)"
                     " or (str, index)")


def IsNullOrEmpty(s):
    if s is None:
        return True
    if len(s) == 0:
        return True
    return False


def IsNullOrWhiteSpace(s):
    if s is None:
        return True
    if len(s) == 0:
        return True
    return str.isspace(s)


def optionalD(n, want_decimals, mode="format", name=""):
    '''
    Mimic C#'s ".##" format where "##" is any number of "#"s. The dot
    and places aren't displayed at all if they aren't present.

    Create a format string that will only add decimals when necessary
    using a calculated number and the g format token. Specify a number of places after
    the decimal point instead of a total number of decimals. For
    example, 11.123456 and .123456 can all be set to 5 decimals or
    fewer (whereas usually with g, 11.123456 would only get three,
    rounded up if next digit were 5 or higher). Also as expected, 12
    will not have any decimal point if formatted with a format string
    from this function.

    Examples:
    - optionalD(11.123456, 5).format(11.123456) yields '11.12346'
    - optionalD(11.12345, 5).format(11.12345) yields '11.12345'
    - optionalD(11.1234, 5).format(11.1234) yields '11.1234'
    - optionalD(11, 5).format(11) yields '11'

    Sequential arguments:
    n -- n will not be used except to calculate how many decimal places
         are necessary.
    Keyword arguments:
    mode -- ("format" (default), "%" or "bare")

            Specify 'format' (or nothing to use it since it is the
            default) for notation that can be used like:
            `optionalD(11.123456, 5).format(num)`
            such as "{:." + str(want_figures) + "g}"
            (generated the same as below, but default name is blank)
            or if you specify name, used like:
            `optionalD(11.123456, 5, name='num').format(num=num)`
            generated like "{"+name+":." + str(want_figures) + "g}"
            where want_figures is calculated as
            want_decimals + len(str(int(n)))

            "%" for notation that can be used like:
            `optionalD(11.123456, 5) % num`
            such as "%." + str(want_figures) + "g"
            or if you specify name, used like:
            `optionalD(11.123456, 5, name='num') % {"num": num}`
            generated like "%("+name+")." + str(want_figures) + "g"
            where want_figures is calculated as
            want_decimals + len(str(int(n)))

            otherwise "bare" for notation that can be used like:
            (
                "    {0: >5"+optionalD(a, 1, mode='bare')+"}"
                "    {1: >5"+optionalD(b, 1, mode='bare')+"}"
                "    {2: >5"+optionalD(c, 1, mode='bare')+"}"
            ).format(a, b, c)
            (name is ignored in this case, so you must specify it
            as per above when necessary)
            generated like "." + str(want_figures) + "g"
            where want_figures is calculated as
            want_decimals + len(str(int(n)))

    '''
    wholes = len(str(int(n)))
    want_figures = want_decimals + wholes
    if mode == '%':
        if name != "":
            return "%("+name+")." + str(want_figures) + "g"
        return "%." + str(want_figures) + "g"
    elif mode == 'bare':
        return "." + str(want_figures) + "g"
    elif mode == 'format':
        return "{"+name+":." + str(want_figures) + "g}"
    else:
        raise NotImplementedError("{} is not implemented as a mode"
                                  "".format(mode))
    # writer.write("%.5g" % self.Number)
    # ^ The format was "##0.#####" (# is optional) in C#
    #   (don't use g since though g makes decimals optional,
    #   .5g counts 5 INCLUDING before the decimal but we always
    #   want all 5 if present)


def decimal_Parse(s):
    return float(s)

def NumberToStr(n):
    '''
    Mimic c# decimal1.ToString() behavior common to G-code (lose the
    decimal places if not present) since in Python, str(float(1.0))
    is "1.0".
    '''
    if isinstance(n, float) and (float(int(n)) == n):
        return str(int(n))
    return str(n)
